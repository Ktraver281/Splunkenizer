---
# This playbook install the apps required in a server

- name: create splunk install dir
  tags:
    - splunk
    - splunk_enterprise
  file:
    path: "{{ splunk_install_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create splunk directory
  tags:
    - splunk
    - splunk_enterprise
  file:
    path: "{{ splunk_home }}"
    state: directory
    owner: "{{ splunk_user }}"
    group: "{{ splunk_group }}"
    mode: 0755

- name: find splunk archive files
  tags:
    - splunk
    - splunk_enterprise
  find:
    path: "{{splunk_software}}/"
    pattern: "{{splunk_install_app}}-*-Linux-x86_64.tgz"
    file_type: file
    recurse: no
  register: splunk_archive_files
  delegate_to: localhost
  become: no

- name: find latest splunk version
  tags:
    - splunk
    - splunk_enterprise
  set_fact:
    splunk_version: "{{splunk_archive_files.files|map(attribute='path')|list|last|basename|regex_replace('.*-([0-9]+.[0-9]+.[0-9]+)-.*', '\\1')}}"
  when: splunk_version == 'latest'

- name: get splunk archive for given version
  tags:
    - splunk
    - splunk_enterprise
  set_fact:
    splunk_archive: '{{splunk_archive_files.files|map(attribute="path")|list|select("match",".*"+splunk_version+".*")|list}}'

- name:
  tags:
    - splunk
    - splunk_enterprise
  debug:
    msg: "Using Splunk archive: {{splunk_archive.0}}"

- name: install splunk binaries
  tags:
    - splunk
    - splunk_enterprise
  unarchive: src="{{splunk_archive.0}}" dest="{{ splunk_install_dir }}/" owner={{ splunk_user }} group={{ splunk_group }} creates=yes
  become: yes
  become_user: "{{ splunk_user }}"

- name: copy shared splunk.secret file
  tags:
    - splunk
    - splunk_enterprise
    - splunk_secret
  copy:
    src: "{{ splunk_auth_dir }}/{{ splunk_install_app }}_splunk.secret"
    dest: "{{ splunk_home }}/etc/auth/splunk.secret"
    owner: "{{splunk_user}}"
    group: "{{splunk_group}}"
    mode: 0400
  when: splunk_secret_share[splunk_install_app] == true and splunk_secret_file.stat.exists == true

- name: install splunk service
  tags:
    - splunk
    - splunk_enterprise
  template:
    src: "etc/systemd/system/{{ splunk_service_name }}.service.j2"
    dest: "/etc/systemd/system/{{ splunk_service_name }}.service"
    owner: root
    group: root
    mode: 0644
  when: use_systemctl == true

- name: commit changes to systemctl
  tags:
    - splunk
    - splunk_enterprise
  command: systemctl daemon-reload
  when: use_systemctl == true

- name: enable and start splunk service
  tags:
    - splunk
    - splunk_enterprise
  service:
    name: "{{ splunk_service_name }}"
    state: started
    enabled: yes
  when: use_systemctl == true

- name: accept license and start splunk
  tags:
    - splunk
    - splunk_enterprise
  command: "{{ splunk_home }}/bin/splunk start --accept-license"
  become: yes
  become_user: "{{ splunk_user }}"
  when: use_systemctl != true

- name: enable boot-start
  tags:
    - splunk
    - splunk_enterprise
  command: "{{ splunk_home }}/bin/splunk enable boot-start -user {{ splunk_user }}"
  when: use_systemctl != true

- name: create hashed password for new password policy
  tags:
    - splunk
    - splunk_enterprise
  shell: "{{ splunk_home }}/bin/splunk hash-passwd '{{splunk_admin_password}}'"
  register: admin_hash_pw
  when: splunk_version is version_compare('7.1', '>=')

- name: "creating user-seed.conf"
  tags:
    - splunk
    - splunk_enterprise
  ini_file:
    path: "{{ splunk_home }}/etc/system/local/user-seed.conf"
    section: user_info
    option: "{{ item.varkey }}"
    value: "{{ item.varvalue }}"
    owner: "{{splunk_user}}"
    group: "{{splunk_group}}"
    mode: 0600
  with_items:
    - { varkey: "USERNAME", varvalue: "admin" }
    - { varkey: "HASHED_PASSWORD", varvalue: "{{ admin_hash_pw.stdout }}" }
  when: splunk_version is version_compare('7.1', '>=')

- name: change splunk admin password
  tags:
    - splunk
    - splunk_enterprise
  command: "{{ splunk_home }}/bin/splunk edit user admin -password '{{splunk_admin_password}}' -auth admin:changeme"
  become: yes
  become_user: "{{ splunk_user }}"
  when: splunk_version is version_compare('7.1', '<')
